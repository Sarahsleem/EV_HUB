import 'package:dartz/dartz.dart';
import 'package:dio/dio.dart';
import '../../../../core/error/error_model.dart';
import '../../../../core/error/failure.dart';
import '../../../sign_in/data/models/log_in_respone.dart';
import '../../../sign_in/data/models/login_model.dart';


class SignUpRepo {
  final Dio _dio;

  SignUpRepo(this._dio);

  Future<Either<ApiErrorModel, LoginResponseModel>> login(LogInModel loginModel) async {
    try {
      final response = await _dio.post('/login', data: loginModel.toMap());

      if (response.statusCode == 200 || response.statusCode == 201) {
        return Right(LoginResponseModel.fromMap(response.data));
      } else {
        // Use ApiErrorHandler to process non-2xx status codes
        return Left(ApiErrorHandler.handleError(response.statusCode, response.data));
      }
    } on DioException catch (e) {
      // Use ApiErrorHandler to process DioExceptions
      final errorModel = ApiErrorHandler.handle(e);
      return Left(errorModel);
    } catch (e) {
      // For other errors, create a general ApiErrorModel
      return Left(ApiErrorModel(
        message: e.toString(),
        status: 500,
        code: "UNEXPECTED_ERROR",
        errors: {},
      ));
    }
  }
}
